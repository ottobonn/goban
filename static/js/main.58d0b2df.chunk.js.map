{"version":3,"sources":["Grid.js","Board.js","SceneManager.js","Goban.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_ref","width","height","rows","cols","Object","classCallCheck","this","rowHeight","colWidth","row","_ref2","x","col","y","Board","DIMENSIONS","margins","top","left","bottom","right","thickness","starPointRadius","starPointLocations","9","13","19","grid","ctx","fromX","fromY","toX","toY","strokeWidth","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","radius","arc","Math","PI","fillStyle","fill","_this$getDimensions","getDimensions","canvas","document","createElement","body","appendChild","texture","THREE","getContext","fillRect","translate","_this$grid$gridToScen","gridToSceneCoordinates","xStart","yStart","_this$grid$gridToScen2","xEnd","yEnd","makeLine","_this$grid$gridToScen3","_this$grid$gridToScen4","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_this$grid$gridToScen5","makeCircle","err","return","needsUpdate","_this$grid$getDimensi","gridWidth","gridHeight","depth","_this$getDimensions2","geometry","topMaterial","map","makeTexture","bottomMaterial","color","edgeGrainMaterial","endGrainMaterial","makeBoard","EffectModulator","effect","modulator","params","SceneManager","scene","camera","context","renderer","antialias","setPixelRatio","effectModulators","ChromaticAberrationEffect","_ref3","amount","minOffset","maxOffset","offset","lerp","composer","EffectComposer","passes","RenderPass","length","renderToScreen","addPass","bind","clock","controls","OrbitControls","domElement","coneAngle","minAzimuthAngle","maxAzimuthAngle","minPolarAngle","maxPolarAngle","maxDistance","zoomSpeed","enablePan","board","_this$board$getDimens","boardWidth","boardHeight","position","z","max","tan","degToRad","fov","add","apply","toConsumableArray","getSceneObjects","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","random","forEach","effectModulator","animate","render","Goban","props","_this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","react_default","a","id","ref","_this2","sceneManager","current","animationFrameRequest","requestAnimationFrame","Component","window","App","state","boundUpdateDimensions","updateDimensions","assertThisInitialized","Goban_Goban","setState","innerWidth","innerHeight","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58d0b2df.chunk.js","sourcesContent":["class Grid {\n  constructor({width, height, rows, cols}) {\n    this.width = width;\n    this.height = height;\n    this.rows = rows;\n    this.cols = cols;\n\n    // If the grid has 19 row lines, it really has 18 \"rows\"\n    this.rowHeight = height / (rows - 1);\n    this.colWidth = width / (cols - 1);\n  }\n  gridToSceneCoordinates({row, col}) {\n    return {\n      x: (col * this.colWidth) - (this.width / 2),\n      y: (row * this.rowHeight) - (this.height / 2),\n    }\n  }\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n  // nearestGridCoordinate({x, y}) {\n  //   x + (this.width / 2)\n  // }\n}\n\nexport {Grid};\n","import * as THREE from 'three';\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\n\nimport {Grid} from './Grid';\n\nclass Board {\n  DIMENSIONS = {\n    rowHeight: 23.7,\n    colWidth: 22,\n    margins: {\n      top: 13.95,\n      left: 14.1,\n      bottom: 13.95,\n      right: 14.1,\n    },\n    thickness: 151.5,\n    starPointRadius: 2,\n    starPointLocations: {\n      9: [\n        {\n          row: 2,\n          col: 2,\n        },\n        {\n          row: 6,\n          col: 2,\n        },\n        {\n          row: 4,\n          col: 4,\n        },\n        {\n          row: 2,\n          col: 6,\n        },\n        {\n          row: 6,\n          col: 6,\n        },\n      ],\n      13: [\n        {\n          row: 3,\n          col: 3,\n        },\n        {\n          row: 9,\n          col: 3,\n        },\n        {\n          row: 6,\n          col: 6,\n        },\n        {\n          row: 3,\n          col: 9,\n        },\n        {\n          row: 9,\n          col: 9,\n        },\n      ],\n      19: [\n        {\n          row: 3,\n          col: 3,\n        },\n        {\n          row: 9,\n          col: 3,\n        },\n        {\n          row: 15,\n          col: 3,\n        },\n        {\n          row: 3,\n          col: 9,\n        },\n        {\n          row: 9,\n          col: 9,\n        },\n        {\n          row: 15,\n          col: 9,\n        },\n        {\n          row: 3,\n          col: 15,\n        },\n        {\n          row: 9,\n          col: 15,\n        },\n        {\n          row: 15,\n          col: 15,\n        },\n      ],\n    },\n  };\n\n  constructor({rows, cols}) {\n    this.rows = rows;\n    this.cols = cols;\n\n    this.grid = new Grid({\n      width: this.DIMENSIONS.colWidth * cols,\n      height: this.DIMENSIONS.rowHeight * rows,\n      rows,\n      cols,\n    });\n  }\n\n  // TODO remove magic scaling 10\n  makeLine(ctx, fromX, fromY, toX, toY, strokeWidth) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#eeeeee';\n    ctx.lineWidth = strokeWidth;\n    ctx.moveTo(fromX * 10, fromY * 10);\n    ctx.lineTo(toX * 10, toY * 10);\n    ctx.stroke();\n  }\n\n  // TODO remove magic scaling 10\n  makeCircle(ctx, {x, y, radius}) {\n    ctx.beginPath();\n    ctx.arc(x * 10, y * 10, radius * 10, 0, 2 * Math.PI);\n    ctx.fillStyle = '#0000ff';\n    ctx.fill();\n  }\n\n  makeTexture() {\n    const {width, height} = this.getDimensions();\n\n    this.canvas = document.createElement('canvas');\n    document.body.appendChild(this.canvas);\n\n    const BITMAP_PIXELS_PER_MM = 10;\n    this.canvas.width = width * BITMAP_PIXELS_PER_MM;\n    this.canvas.height = height * BITMAP_PIXELS_PER_MM;\n\n    const texture = new THREE.Texture(this.canvas);\n    const ctx = this.canvas.getContext('2d');\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.translate(this.canvas.width / 2, this.canvas.height / 2);\n\n    for (let col = 0; col < this.cols; col++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row: 0,\n        col,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row: this.rows - 1,\n        col,\n      });\n      this.makeLine(ctx, xStart, yStart, xEnd, yEnd, 1 * BITMAP_PIXELS_PER_MM);\n    }\n\n    for (let row = 0; row < this.rows; row++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row,\n        col: 0,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row,\n        col: this.cols - 1,\n      });\n      this.makeLine(ctx, xStart, yStart, xEnd, yEnd, 1 * BITMAP_PIXELS_PER_MM);\n    }\n\n    const starPointLocations = this.DIMENSIONS.starPointLocations[this.rows] || [];\n    for (const {row, col} of starPointLocations) {\n      const {x, y} = this.grid.gridToSceneCoordinates({row, col});\n      this.makeCircle(ctx, {\n        x,\n        y,\n        radius: this.DIMENSIONS.starPointRadius,\n      });\n    }\n\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n\n  getDimensions() {\n    const {\n      width: gridWidth,\n      height: gridHeight,\n    } = this.grid.getDimensions();\n    const {margins} = this.DIMENSIONS;\n    return {\n      width: gridWidth + margins.left + margins.right,\n      height: gridHeight + margins.top + margins.bottom,\n      depth: this.DIMENSIONS.thickness,\n    };\n  }\n\n  makeBoard() {\n    const {width, height, depth} = this.getDimensions();\n    const geometry = new THREE.BoxGeometry(width, height, depth);\n    geometry.translate(0, 0, -depth / 2); // top of board is at z = 0\n\n    const topMaterial = new THREE.MeshBasicMaterial({\n      map: this.makeTexture(),\n    });\n\n    const bottomMaterial = new THREE.MeshBasicMaterial({\n      color: '#ff0000',\n    });\n\n    const edgeGrainMaterial = new THREE.MeshBasicMaterial({\n      color: '#00ff00',\n    });\n\n    const endGrainMaterial = new THREE.MeshBasicMaterial({\n      color: '#ff0000',\n    });\n\n    return new THREE.Mesh(geometry, [\n      edgeGrainMaterial,\n      edgeGrainMaterial,\n      endGrainMaterial,\n      endGrainMaterial,\n      topMaterial,\n      bottomMaterial,\n    ]);\n  }\n\n  getSceneObjects() {\n    return [\n      this.makeBoard(),\n    ];\n  }\n\n  update() {\n    // do nothing\n  }\n}\n\nexport {Board};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, RenderPass, ChromaticAberrationEffect} from 'postprocessing';\nimport OrbitControls from 'three-orbitcontrols';\n\nimport {Board} from './Board';\n\nclass EffectModulator {\n  constructor({effect, modulator}) {\n    this.effect = effect;\n    this.modulator = modulator || (() => {});\n  }\n  animate(params) {\n    this.modulator(this.effect, params);\n  }\n}\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.001, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n      // alpha: true,\n    });\n\n    renderer.setPixelRatio(2);\n\n    this.effectModulators = [\n      new EffectModulator({\n        effect: new ChromaticAberrationEffect(),\n        modulator(effect, {amount}) {\n          const minOffset = new THREE.Vector2(0, 0);\n          const maxOffset = new THREE.Vector2(0.05, 0.05);\n          const offset = minOffset.lerp(maxOffset, amount);\n          effect.offset = offset;\n        },\n      }),\n    ];\n\n    // const effects = this.effectModulators.map(modulator => modulator.effect);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      // new EffectPass(camera, ...effects),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const coneAngle = Math.PI / 2;\n    controls.minAzimuthAngle = -coneAngle;\n    controls.maxAzimuthAngle = coneAngle;\n\n    controls.minPolarAngle = Math.PI / 2 - coneAngle;\n    controls.maxPolarAngle = Math.PI / 2 + coneAngle;\n\n    controls.maxDistance = 500;\n    controls.zoomSpeed = 0.3;\n    controls.enablePan = false;\n    this.controls = controls;\n\n    this.board = new Board({\n      scene,\n      rows: 19,\n      cols: 19,\n    });\n\n    // Zoom to fit\n    const {width: boardWidth, height: boardHeight} = this.board.getDimensions();\n    this.camera.position.z = (Math.max(boardWidth, boardHeight) / 2) / Math.tan(THREE.Math.degToRad(this.camera.fov / 2));\n\n    scene.add(...this.board.getSceneObjects());\n  }\n\n  animate(params) {\n    // this.controls.update();\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n\n      this.camera.aspect = width / height;\n\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    // TODO adding to params seems to mix concerns; who should own the clock?\n    params.clock = this.clock;\n    params.amount = Math.random();\n\n    // TODO render the board here\n\n\n\n    this.effectModulators.forEach(effectModulator => effectModulator.animate(params));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","import React, {Component} from 'react';\nimport {SceneManager} from './SceneManager';\n\nclass Goban extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  componentDidMount(){\n    const sceneManager = new SceneManager({\n      canvas: this.canvasRef.current,\n    });\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      sceneManager.animate({\n        width: this.props.width,\n        height: this.props.height,\n      });\n    }\n    animate();\n  }\n}\n\nexport {Goban};\n","import React, {Component} from 'react';\nimport * as THREE from 'three';\n\nimport {Goban} from './Goban';\nimport './App.css';\n\nwindow.THREE = THREE;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n    this.boundUpdateDimensions = this.updateDimensions.bind(this);\n  }\n  render() {\n    return (\n      <Goban\n        width={this.state.width}\n        height={this.state.height}\n      />\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}