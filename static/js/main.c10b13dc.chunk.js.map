{"version":3,"sources":["Grid.js","Board.js","SceneManager.js","Goban.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_ref","width","height","rows","cols","Object","classCallCheck","this","rowHeight","colWidth","row","_ref2","x","col","y","Board","DIMENSIONS","margins","top","left","bottom","right","grid","console","log","_this$grid$getDimensi","getDimensions","gridWidth","gridHeight","points","geometry","THREE","vertices","material","MeshLineMaterial","color","lineWidth","lineObject","MeshLine","setGeometry","t","verticalLines","horizontalLines","_this$grid$gridToScen","gridToSceneCoordinates","xStart","yStart","_this$grid$gridToScen2","xEnd","yEnd","push","makeLine","_this$grid$gridToScen3","_this$grid$gridToScen4","concat","EffectModulator","effect","modulator","params","SceneManager","canvas","scene","camera","context","getContext","renderer","antialias","setPixelRatio","effectModulators","ChromaticAberrationEffect","_ref3","amount","minOffset","maxOffset","offset","lerp","composer","EffectComposer","passes","RenderPass","length","renderToScreen","map","addPass","bind","clock","controls","OrbitControls","domElement","coneAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","minPolarAngle","maxPolarAngle","maxDistance","zoomSpeed","enablePan","enableDamping","board","_this$board$getDimens","boardWidth","boardHeight","position","z","max","tan","degToRad","fov","add","apply","toConsumableArray","getSceneObjects","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","random","forEach","effectModulator","animate","render","Goban","props","_this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","react_default","a","createElement","id","ref","_this2","sceneManager","current","animationFrameRequest","requestAnimationFrame","Component","window","App","state","boundUpdateDimensions","updateDimensions","assertThisInitialized","Goban_Goban","setState","innerWidth","innerHeight","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c10b13dc.chunk.js","sourcesContent":["class Grid {\n  constructor({width, height, rows, cols}) {\n    this.width = width;\n    this.height = height;\n    this.rows = rows;\n    this.cols = cols;\n\n    this.rowHeight = height / rows;\n    this.colWidth = width / cols;\n  }\n  gridToSceneCoordinates({row, col}) {\n    return {\n      x: (col * this.colWidth) - (this.width / 2),\n      y: (row * this.rowHeight) - (this.height / 2),\n    }\n  }\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n  // nearestGridCoordinate({x, y}) {\n  //   x + (this.width / 2)\n  // }\n}\n\nexport {Grid};\n","import * as THREE from 'three';\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\n\nimport {Grid} from './Grid';\n\nclass Board {\n  DIMENSIONS = {\n    rowHeight: 23.7,\n    colWidth: 22,\n    margins: {\n      top: 12,\n      left: 12,\n      bottom: 12,\n      right: 12,\n    },\n  };\n\n  constructor({rows, cols}) {\n    this.rows = rows;\n    this.cols = cols;\n\n    this.grid = new Grid({\n      width: this.DIMENSIONS.colWidth * cols,\n      height: this.DIMENSIONS.rowHeight * rows,\n      rows,\n      cols,\n    });\n    console.log(this.grid)\n  }\n\n  getDimensions() {\n    const {\n      width: gridWidth,\n      height: gridHeight,\n    } = this.grid.getDimensions();\n    const {margins} = this.DIMENSIONS;\n    return {\n      width: gridWidth + margins.left + margins.right,\n      height: gridHeight + margins.top + margins.bottom,\n    };\n  }\n\n  makeLine(points) {\n    const geometry = new THREE.Geometry();\n    geometry.vertices = points;\n\n    const material = new MeshLineMaterial({\n      color: 0x666666,\n      lineWidth: 1,\n    });\n\n    const lineObject = new MeshLine();\n    lineObject.setGeometry(geometry, t => 1);\n\n    return new THREE.Mesh(lineObject.geometry, material);\n  }\n\n  getSceneObjects() {\n    const verticalLines = [];\n    const horizontalLines = [];\n\n    for (let col = 0; col < this.cols; col++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row: 0,\n        col,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row: this.rows - 1,\n        col,\n      });\n      verticalLines.push(this.makeLine([\n        new THREE.Vector3(xStart, yStart, 0),\n        new THREE.Vector3(xEnd, yEnd, 0),\n      ]));\n    }\n\n    for (let row = 0; row < this.rows; row++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row,\n        col: 0,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row,\n        col: this.cols - 1,\n      });\n      horizontalLines.push(this.makeLine([\n        new THREE.Vector3(xStart, yStart, 0),\n        new THREE.Vector3(xEnd, yEnd, 0),\n      ]));\n    }\n\n    return [\n      ...verticalLines,\n      ...horizontalLines,\n    ];\n  }\n\n  update() {\n    // do nothing\n  }\n}\n\nexport {Board};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, RenderPass, ChromaticAberrationEffect} from 'postprocessing';\nimport OrbitControls from 'three-orbitcontrols';\n\nimport {Board} from './Board';\n\nclass EffectModulator {\n  constructor({effect, modulator}) {\n    this.effect = effect;\n    this.modulator = modulator || (() => {});\n  }\n  animate(params) {\n    this.modulator(this.effect, params);\n  }\n}\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    renderer.setPixelRatio(2);\n\n    this.effectModulators = [\n      new EffectModulator({\n        effect: new ChromaticAberrationEffect(),\n        modulator(effect, {amount}) {\n          const minOffset = new THREE.Vector2(0, 0);\n          const maxOffset = new THREE.Vector2(0.05, 0.05);\n          const offset = minOffset.lerp(maxOffset, amount);\n          effect.offset = offset;\n        },\n      }),\n    ];\n\n    // const effects = this.effectModulators.map(modulator => modulator.effect);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      // new EffectPass(camera, ...effects),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const coneAngle = Math.PI / 3;\n    controls.minAzimuthAngle = -coneAngle;\n    controls.maxAzimuthAngle = coneAngle;\n\n    controls.minPolarAngle = coneAngle;\n    controls.maxPolarAngle = Math.PI - coneAngle;\n\n    controls.maxDistance = 500;\n    controls.zoomSpeed = 0.3;\n    controls.enablePan = false;\n    controls.enableDamping = true;\n    this.controls = controls;\n\n    this.board = new Board({\n      scene,\n      rows: 18,\n      cols: 18,\n    });\n\n    // Zoom to fit\n    const {width: boardWidth, height: boardHeight} = this.board.getDimensions();\n    this.camera.position.z = (Math.max(boardWidth, boardHeight) / 2) / Math.tan(THREE.Math.degToRad(this.camera.fov / 2));\n\n    scene.add(...this.board.getSceneObjects());\n  }\n\n  animate(params) {\n    // this.controls.update();\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n\n      this.camera.aspect = width / height;\n\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    // TODO adding to params seems to mix concerns; who should own the clock?\n    params.clock = this.clock;\n    params.amount = Math.random();\n\n    // TODO render the board here\n\n\n\n    this.effectModulators.forEach(effectModulator => effectModulator.animate(params));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","import React, {Component} from 'react';\nimport {SceneManager} from './SceneManager';\n\nclass Goban extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  componentDidMount(){\n    const sceneManager = new SceneManager({\n      canvas: this.canvasRef.current,\n    });\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      sceneManager.animate({\n        width: this.props.width,\n        height: this.props.height,\n      });\n    }\n    animate();\n  }\n}\n\nexport {Goban};\n","import React, {Component} from 'react';\nimport * as THREE from 'three';\n\nimport {Goban} from './Goban';\nimport './App.css';\n\nwindow.THREE = THREE;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n    this.boundUpdateDimensions = this.updateDimensions.bind(this);\n  }\n  render() {\n    return (\n      <Goban\n        width={this.state.width}\n        height={this.state.height}\n      />\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}