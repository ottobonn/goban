{"version":3,"sources":["Grid.js","GridLines.js","Board.js","SceneManager.js","Goban.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_ref","width","height","rows","cols","Object","classCallCheck","this","rowHeight","colWidth","row","_ref2","x","col","y","GridLines","grid","margins","lineColor","BITMAP_PIXELS_PER_MM","DIMENSIONS","lineWidth","starPointRadius","starPointLocations","9","13","19","cssLineColor","concat","toString","padStart","canvas","document","createElement","_this$grid$getDimensi","getDimensions","left","right","top","bottom","ctx","getContext","translate","fromX","fromY","toX","toY","beginPath","strokeStyle","moveTo","lineTo","stroke","radius","arc","Math","PI","fillStyle","fill","texture","THREE","_this$grid$gridToScen","gridToSceneCoordinates","xStart","yStart","_this$grid$gridToScen2","xEnd","yEnd","makeLine","_this$grid$gridToScen3","_this$grid$gridToScen4","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_this$grid$gridToScen5","makeCircle","err","return","needsUpdate","Board","thickness","gridWidth","gridHeight","depth","_this$getDimensions","geometry","addGroup","surfaceMaterial","map","load","normalMap","gridLines","linesMaterial","makeTexture","transparent","edgeGrainMaterial","normalMapMode","endGrainMaterial","makeBoard","SceneManager","scene","camera","context","renderer","antialias","setPixelRatio","window","devicePixelRatio","composer","EffectComposer","passes","RenderPass","length","renderToScreen","addPass","bind","clock","controls","OrbitControls","domElement","coneAngle","minPolarAngle","maxPolarAngle","maxDistance","zoomSpeed","enablePan","board","ambientLight","add","forEach","position","_directionalLight$pos","directionalLight","set","apply","toConsumableArray","_this$board$getDimens","boardWidth","boardHeight","z","max","tan","degToRad","fov","getSceneObjects","params","update","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","render","Goban","props","_this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","react_default","a","id","ref","_this2","sceneManager","current","animate","animationFrameRequest","requestAnimationFrame","Component","App","state","boundUpdateDimensions","updateDimensions","assertThisInitialized","Goban_Goban","setState","innerWidth","innerHeight","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0698ee8.chunk.js","sourcesContent":["class Grid {\n  constructor({width, height, rows, cols}) {\n    this.width = width;\n    this.height = height;\n    this.rows = rows;\n    this.cols = cols;\n\n    // If the grid has 19 row lines, it really has 18 \"rows\"\n    this.rowHeight = height / (rows - 1);\n    this.colWidth = width / (cols - 1);\n  }\n  gridToSceneCoordinates({row, col}) {\n    return {\n      x: (col * this.colWidth) - (this.width / 2),\n      y: (row * this.rowHeight) - (this.height / 2),\n    }\n  }\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n  // nearestGridCoordinate({x, y}) {\n  //   x + (this.width / 2)\n  // }\n}\n\nexport {Grid};\n","import * as THREE from 'three';\n\nclass GridLines {\n  BITMAP_PIXELS_PER_MM = 10;\n  DIMENSIONS = {\n    lineWidth: 1,\n    starPointRadius: 2,\n    starPointLocations: {\n      9: [\n        {\n          row: 2,\n          col: 2,\n        },\n        {\n          row: 6,\n          col: 2,\n        },\n        {\n          row: 4,\n          col: 4,\n        },\n        {\n          row: 2,\n          col: 6,\n        },\n        {\n          row: 6,\n          col: 6,\n        },\n      ],\n      13: [\n        {\n          row: 3,\n          col: 3,\n        },\n        {\n          row: 9,\n          col: 3,\n        },\n        {\n          row: 6,\n          col: 6,\n        },\n        {\n          row: 3,\n          col: 9,\n        },\n        {\n          row: 9,\n          col: 9,\n        },\n      ],\n      19: [\n        {\n          row: 3,\n          col: 3,\n        },\n        {\n          row: 9,\n          col: 3,\n        },\n        {\n          row: 15,\n          col: 3,\n        },\n        {\n          row: 3,\n          col: 9,\n        },\n        {\n          row: 9,\n          col: 9,\n        },\n        {\n          row: 15,\n          col: 9,\n        },\n        {\n          row: 3,\n          col: 15,\n        },\n        {\n          row: 9,\n          col: 15,\n        },\n        {\n          row: 15,\n          col: 15,\n        },\n      ],\n    },\n  };\n\n  constructor({grid, margins, lineColor}) {\n    this.grid = grid;\n    this.margins = margins;\n    this.lineColor = lineColor;\n    this.cssLineColor = `#${this.lineColor.toString(16).padStart(6)}`;\n\n    this.canvas = document.createElement('canvas');\n\n    const {width, height} = this.grid.getDimensions();\n    this.canvas.width = (width + margins.left + margins.right) * this.BITMAP_PIXELS_PER_MM;\n    this.canvas.height = (height + margins.top + margins.bottom) * this.BITMAP_PIXELS_PER_MM;\n\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.translate(this.canvas.width / 2, this.canvas.height / 2);\n  }\n\n  makeLine(fromX, fromY, toX, toY) {\n    const ctx = this.ctx;\n    ctx.beginPath();\n    ctx.strokeStyle = this.cssLineColor;\n    ctx.lineWidth = this.DIMENSIONS.lineWidth * this.BITMAP_PIXELS_PER_MM;\n    ctx.moveTo(fromX * this.BITMAP_PIXELS_PER_MM, fromY * this.BITMAP_PIXELS_PER_MM);\n    ctx.lineTo(toX * this.BITMAP_PIXELS_PER_MM, toY * this.BITMAP_PIXELS_PER_MM);\n    ctx.stroke();\n  }\n\n  makeCircle({x, y, radius}) {\n    const ctx = this.ctx;\n    ctx.beginPath();\n    ctx.arc(x * this.BITMAP_PIXELS_PER_MM, y * this.BITMAP_PIXELS_PER_MM, radius * this.BITMAP_PIXELS_PER_MM, 0, 2 * Math.PI);\n    ctx.fillStyle = this.cssLineColor;\n    ctx.fill();\n  }\n\n  makeTexture() {\n    const texture = new THREE.Texture(this.canvas);\n\n    for (let col = 0; col < this.grid.cols; col++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row: 0,\n        col,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row: this.grid.rows - 1,\n        col,\n      });\n      this.makeLine(xStart, yStart, xEnd, yEnd);\n    }\n\n    for (let row = 0; row < this.grid.rows; row++) {\n      const {x: xStart, y: yStart} = this.grid.gridToSceneCoordinates({\n        row,\n        col: 0,\n      });\n      const {x: xEnd, y: yEnd} = this.grid.gridToSceneCoordinates({\n        row,\n        col: this.grid.cols - 1,\n      });\n      this.makeLine(xStart, yStart, xEnd, yEnd);\n    }\n\n    const starPointLocations = this.DIMENSIONS.starPointLocations[this.grid.rows] || [];\n    for (const {row, col} of starPointLocations) {\n      const {x, y} = this.grid.gridToSceneCoordinates({row, col});\n      this.makeCircle({\n        x,\n        y,\n        radius: this.DIMENSIONS.starPointRadius,\n      });\n    }\n\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n}\n\nexport {GridLines};\n","import * as THREE from 'three';\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\n\nimport {Grid} from './Grid';\nimport {GridLines} from './GridLines';\n\nclass Board {\n  DIMENSIONS = {\n    rowHeight: 23.7,\n    colWidth: 22,\n    margins: {\n      top: 13.95,\n      left: 14.1,\n      bottom: 13.95,\n      right: 14.1,\n    },\n    thickness: 38.1,\n    starPointRadius: 2,\n  };\n\n  constructor({rows, cols}) {\n    this.rows = rows;\n    this.cols = cols;\n\n    this.grid = new Grid({\n      width: this.DIMENSIONS.colWidth * cols,\n      height: this.DIMENSIONS.rowHeight * rows,\n      rows,\n      cols,\n    });\n  }\n\n  getDimensions() {\n    const {\n      width: gridWidth,\n      height: gridHeight,\n    } = this.grid.getDimensions();\n    const {margins} = this.DIMENSIONS;\n    return {\n      width: gridWidth + margins.left + margins.right,\n      height: gridHeight + margins.top + margins.bottom,\n      depth: this.DIMENSIONS.thickness,\n    };\n  }\n\n  makeBoard() {\n    const {width, height, depth} = this.getDimensions();\n    const geometry = new THREE.BoxBufferGeometry(width, height, depth);\n    geometry.translate(0, 0, -depth / 2); // top of board is at z = 0\n\n    // Add a second material to the front face (triangles 24-30) for the lines\n    geometry.addGroup(24, 6, 6);\n\n    const surfaceMaterial = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load('/assets/textures/walnut.jpg'),\n      normalMap: new THREE.TextureLoader().load('/assets/textures/walnut_normal.jpg'),\n    });\n\n    const gridLines = new GridLines({\n      grid: this.grid,\n      margins: this.DIMENSIONS.margins,\n      lineColor: 0xfbc90b,\n    });\n    const linesMaterial = new THREE.MeshBasicMaterial({\n      map: gridLines.makeTexture(),\n      transparent: true,\n    });\n\n    const edgeGrainMaterial = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load('/assets/textures/walnut.jpg'),\n      normalMap: new THREE.TextureLoader().load('/assets/textures/walnut_normal.jpg'),\n      normalMapMode: THREE.ObjectSpaceNormalMap,\n    });\n\n    const endGrainMaterial = edgeGrainMaterial; // TODO\n\n    const mesh = new THREE.Mesh(geometry, [\n      edgeGrainMaterial,\n      edgeGrainMaterial,\n      endGrainMaterial,\n      endGrainMaterial,\n      surfaceMaterial,\n      surfaceMaterial,\n      linesMaterial,\n    ]);\n    // mesh.castShadow = true;\n\n    return mesh;\n  }\n\n  getSceneObjects() {\n    return [\n      this.makeBoard(),\n    ];\n  }\n\n  update() {\n    // do nothing\n  }\n}\n\nexport {Board};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, RenderPass, ChromaticAberrationEffect} from 'postprocessing';\nimport OrbitControls from 'three-orbitcontrols';\n\nimport {Board} from './Board';\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      // new EffectPass(camera, ...effects),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const coneAngle = Math.PI / 2;\n    // controls.minAzimuthAngle = -coneAngle;\n    // controls.maxAzimuthAngle = coneAngle;\n\n    controls.minPolarAngle = Math.PI / 2 - coneAngle;\n    controls.maxPolarAngle = Math.PI / 2 + coneAngle;\n\n    controls.maxDistance = 500;\n    controls.zoomSpeed = 0.3;\n    controls.enablePan = false;\n    this.controls = controls;\n\n    this.board = new Board({\n      rows: 19,\n      cols: 19,\n    });\n\n    const ambientLight = new THREE.AmbientLight(0xFFFFFF, 0.2);\n    scene.add(ambientLight);\n\n    const directionalLightPositions = [\n      // [200, 200, 200],\n      [-100, -100, -100],\n    ];\n\n    directionalLightPositions.forEach(position => {\n      const directionalLight = new THREE.DirectionalLight(0xFFFFFF, 0.3);\n      directionalLight.position.set(...position);\n      scene.add(directionalLight);\n    });\n\n    // Zoom to fit\n    const {width: boardWidth, height: boardHeight} = this.board.getDimensions();\n    this.camera.position.z = (Math.max(boardWidth, boardHeight) / 2) / Math.tan(THREE.Math.degToRad(this.camera.fov / 2));\n\n    scene.add(...this.board.getSceneObjects());\n  }\n\n  animate(params) {\n    this.controls.update();\n\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n\n      this.camera.aspect = width / height;\n\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","import React, {Component} from 'react';\nimport {SceneManager} from './SceneManager';\n\nclass Goban extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  componentDidMount(){\n    const sceneManager = new SceneManager({\n      canvas: this.canvasRef.current,\n    });\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      sceneManager.animate({\n        width: this.props.width,\n        height: this.props.height,\n      });\n    }\n    animate();\n  }\n}\n\nexport {Goban};\n","import React, {Component} from 'react';\nimport * as THREE from 'three';\n\nimport {Goban} from './Goban';\nimport './App.css';\n\nwindow.THREE = THREE;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n    this.boundUpdateDimensions = this.updateDimensions.bind(this);\n  }\n  render() {\n    return (\n      <Goban\n        width={this.state.width}\n        height={this.state.height}\n      />\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.boundUpdateDimensions);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}